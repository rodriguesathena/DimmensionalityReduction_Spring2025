select(-non_pre_reg_state) %>%
pivot_wider(names_from = year, values_from = turnout)
) %>%
arrange(match(state_label, c(
"Hawaii", "Florida", "Oregon", "California", "North Carolina",
"Rhode Island", "DC", "Maryland", "Maine", "Delaware",
"Prereg. States", "Other States"
)))
final_table_data %>%
mutate(across(-state_label, ~ round(.x, 1))) %>%
gt(rowname_col = "state_label") %>%
tab_header(title = md("**Table 1** Turnout among Young Voters (CPS, 2000–2012)")) %>%
sub_missing(missing_text = "") %>%
tab_options(table.font.size = "small", column_labels.font.weight = "bold")
setwd("C:/Users/athen/Documents/GitHub/SocialForecasting_Spring2025/Assignment/Assignment2")
library(tidyr)
library(readr)
library(ggplot2)
library(fpp2)
data <- read_csv("usmelec.csv")
head(data)
View(data)
data <- read_csv("usmelec.csv")
head(data)
data_ts <- ts(data$time, start = c(1973, 1), frequency = 12)
autoplot(data_ts)
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
View(decomp)
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
trend <- decomp$time.series[, "trend"]
head(trend)
remainder <- decomp$time.series[, "remainder"]
head(trend)
data%>% stl(s.window=14, t.window = 2) %>%
autoplot()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
trend <- decomp$time.series[, "trend"]
head(trend)
remainder <- decomp$time.series[, "remainder"]
head(trend)
data_ts %>% stl(s.window=14, t.window = 2) %>%
autoplot()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
trend <- decomp$time.series[, "trend"]
head(trend)
remainder <- decomp$time.series[, "remainder"]
head(trend)
data_ts %>% stl(s.window=14, t.window = 2) %>%
autoplot()
data <- read_csv("usmelec.csv")
head(data)
data_ts <- ts(data$time, start = c(1973, 1), frequency = 12)
autoplot(data_ts)
smooth <- ses(data_ts, h=12, alpha = 0.05)
autoplot(smooth) + ggtitle("Simple Exponential Smoothing Forecast")
smooth <- ses(decomp, h=12, alpha = 0.05)
data <- read_csv("usmelec.csv")
head(data)
data_ts <- ts(data$val, start = c(1973, 1), frequency = 12)
autoplot(data_ts)
data <- read_csv("usmelec.csv")
head(data)
data_ts <- ts(data$val, start = c(1973, 1), frequency = 12)
autoplot(data_ts) +
ggtitle("US Monthly Electricity Generation (1973–2013)") +
ylab("Billion kWh") + xlab("Year") + theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
trend <- decomp$time.series[, "trend"]
head(trend)
remainder <- decomp$time.series[, "remainder"]
head(trend)
data_ts %>% stl(s.window=14, t.window = 2) %>%
autoplot()
setwd("C:/Users/athen/Documents/GitHub/SocialForecasting_Spring2025/Assignment/Assignment2")
library(tidyr)
library(readr)
library(knitr)
library(ggplot2)
library(fpp2)
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
kable(head(cbind(seasonal, trend, remainder)), caption = "First Values of STL Components")
data_ts %>% stl(s.window=14, t.window = 2) %>%
autoplot()
View(decomp)
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
kable(head(cbind(seasonal, trend, remainder)), caption = "First Values of STL Components")
autoplot(decomp) +
ggtitle("STL Decomposition of US Electricity Generation") +
theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
kable(head(cbind(seasonal, trend, remainder)), caption = "First Values of STL Components")
data_ts %>% stl(s.window=14, t.window = 2) %>%
autoplot()
autoplot(decomp) +
ggtitle("STL Decomposition of US Electricity Generation") +
theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
kable(head(cbind(seasonal, trend, remainder)), caption = "First Values of STL Components")
autoplot(decomp) +
ggtitle("STL Decomposition of US Electricity Generation") +
theme_minimal()
smooth <- ses(data_ts, h=12, alpha = 0.05)
autoplot(smooth) + ggtitle("Simple Exponential Smoothing Forecast")
smooth <- ses(data_ts, h=12, alpha = 0.05)
autoplot(smooth) +
autolayer(fitted(smooth), series = "Fitted") +
ggtitle("Simple Exponential Smoothing Forecast") +
ylab("Electricity Generation (Billion kWh)") +
xlab("Year") +
guides(colour = guide_legend(title = "Series")) +
theme_minimal()
data <- read_csv("usmelec.csv")
kable(head(data), caption = "First Rows of the US Electricity Data")
data_ts <- ts(data$val, start = c(1973, 1), frequency = 12)
autoplot(data_ts) +
ggtitle("US Monthly Electricity Generation (1973–2013)") +
ylab("Billion kWh") + xlab("Year") + theme_minimal()
data <- read_csv("usmelec.csv")
data_ts <- ts(data$val, start = c(1973, 1), frequency = 12)
autoplot(data_ts) +
ggtitle("US Monthly Electricity Generation (1973–2013)") +
ylab("Billion kWh") + xlab("Year") + theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
autoplot(seasonal)
trend <- decomp$time.series[, "trend"]
remainder <- decomp$time.series[, "remainder"]
kable(head(cbind(seasonal, trend, remainder)), caption = "First Values of STL Components")
autoplot(decomp) +
ggtitle("STL Decomposition of US Electricity Generation") +
theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
autoplot(seasonal) + ggtitle("Seasonal Component") + theme_minimal()
trend <- decomp$time.series[, "trend"]
autoplot(trend) + ggtitle("Trend Component") + theme_minimal()
remainder <- decomp$time.series[, "remainder"]
autoplot(remainder) + ggtitle("Remainder Component") + theme_minimal()
autoplot(decomp) +
ggtitle("STL Decomposition of US Electricity Generation") +
theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
autoplot(seasonal) + ggtitle("Seasonal Component") + theme_minimal()
trend <- decomp$time.series[, "trend"]
autoplot(trend) + ggtitle("Trend Component") + theme_minimal()
remainder <- decomp$time.series[, "remainder"]
autoplot(remainder) + ggtitle("Remainder Component") + theme_minimal()
autoplot(decomp) +
ggtitle("Full Decomposition of US Electricity Generation") +
theme_minimal()
smooth <- ses(data_ts, h=12, alpha = 0.05)
autoplot(smooth) +
autolayer(fitted(smooth), series = "Fitted") +
ggtitle("Simple Exponential Smoothing Forecast") +
ylab("Electricity Generation (Billion kWh)") +
xlab("Year") +
guides(colour = guide_legend(title = "Series")) +
theme_minimal()
ggAcf(data_ts)
#non-stationary
ggAcf(data_ts) +  ggtitle("Original ACF Plot")
#seasonal differencing
seasonal <- diff(data_ts, lag = 12)
ggAcf(diff_seasonal) +
ggtitle("AFC Plot after Seasonal Differencing") +
#non-stationary
ggAcf(data_ts) +  ggtitle("Original ACF Plot")
#seasonal differencing
seasonal <- diff(data_ts, lag = 12)
ggAcf(diff_seasonal) +
ggtitle("AFC Plot after Seasonal Differencing")
#non-stationary
ggAcf(data_ts) +  ggtitle("Original ACF Plot")
#seasonal differencing
differencing <- diff(data_ts, lag = 12)
ggAcf(differencing) +
ggtitle("AFC Plot after Seasonal Differencing")
arimamodel <- auto.arima(data_ts)
summary(arimamodel)
checkresiduals(arimamodel)
checkresiduals(arimamodel) +
ggtitle("Checking ARIMA Residuals")
checkresiduals(arimamodel)
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
autoplot(seasonal) + ggtitle("Seasonal Component") + theme_minimal()
trend <- decomp$time.series[, "trend"]
head(trend)
autoplot(trend) + ggtitle("Trend Component") + theme_minimal()
remainder <- decomp$time.series[, "remainder"]
head(remainder)
autoplot(remainder) + ggtitle("Remainder Component") + theme_minimal()
autoplot(decomp) +
ggtitle("Full Decomposition of US Electricity Generation") +
theme_minimal()
setwd("C:/Users/athen/Documents/GitHub/SocialForecasting_Spring2025/Assignment/Assignment2")
library(tidyr)
library(readr)
library(knitr)
library(ggplot2)
library(fpp2)
arimamodel <- auto.arima(data_ts)
setwd("C:/Users/athen/Documents/GitHub/SocialForecasting_Spring2025/Assignment/Assignment2")
library(tidyr)
library(readr)
library(knitr)
library(ggplot2)
library(fpp2)
data <- read_csv("usmelec.csv")
data_ts <- ts(data$val, start = c(1973, 1), frequency = 12)
autoplot(data_ts) +
ggtitle("US Monthly Electricity Generation (1973–2013)") +
ylab("Billion kWh") + xlab("Year") + theme_minimal()
decomp <- stl(data_ts, s.window = "periodic")
seasonal <- decomp$time.series[, "seasonal"]
head(seasonal)
autoplot(seasonal) + ggtitle("Seasonal Component") + theme_minimal()
trend <- decomp$time.series[, "trend"]
head(trend)
autoplot(trend) + ggtitle("Trend Component") + theme_minimal()
remainder <- decomp$time.series[, "remainder"]
head(remainder)
autoplot(remainder) + ggtitle("Remainder Component") + theme_minimal()
autoplot(decomp) +
ggtitle("Full Decomposition of US Electricity Generation") +
theme_minimal()
smooth <- ses(data_ts, h=12, alpha = 0.05)
autoplot(smooth) +
autolayer(fitted(smooth), series = "Fitted") +
ggtitle("Simple Exponential Smoothing Forecast") +
ylab("Electricity Generation (Billion kWh)") +
xlab("Year") +
guides(colour = guide_legend(title = "Series")) +
theme_minimal()
#non-stationary
ggAcf(data_ts) +  ggtitle("Original ACF Plot")
#seasonal differencing
differencing <- diff(data_ts, lag = 12)
ggAcf(differencing) +
ggtitle("ACF Plot after Seasonal Differencing")
arimamodel <- auto.arima(data_ts)
summary(arimamodel)
checkresiduals(arimamodel)
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(psych)
data <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705")
data <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv")
data <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv", show_col_types = FALSE)
df <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv", show_col_types = FALSE)
View(df)
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(dplyr)
library(psych)
#only pre-2020 election
data <- df %>%
select(-starts_with(profile),
-starts_with(w2),
- starts_with(w3))
#only pre-2020 election
data <- df %>%
select(-starts_with("profile"),
-starts_with("w2"),
-starts_with("w3"))
View(df)
View(data)
#only pre-2020 election
data <- df %>%
select("case_id")
#only pre-2020 election
data <- df %>%
select("caseid")
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(dplyr)
library(psych)
df <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv", show_col_types = FALSE)
#only pre-2020 election
data <- df %>%
select("caseid")
View(data)
#selecting variables
data <- df %>%
select("caseid",
"profile_gender",
"profile_age",
"hp_you",
"gundiff",
"c_self",
"rr1",
"rr2",
"immpol",
"trustvote",
"con_fbi")
View(data)
#selecting variables
data <- df %>%
select("caseid",
"profile_gender",
"profile_age",
"hp_you",
"gundiff",
"c_self",
"rr1",
"rr2",
"immpol",
"trustvote",
"con_fbi")
# Step 2: Create master party affiliation variable
data <- df %>%
mutate(
pid_base = case_when(
!!sym(pid_raw) == 1 ~ "Democrat",
!!sym(pid_raw) == 2 ~ "Republican",
!!sym(pid_raw) == 3 ~ "Independent",
!!sym(pid_raw) == 4 ~ "Other"
),
pid_type = case_when(
pid_base == "Democrat" & pidstr == 1 ~ "Strong Democrat",
pid_base == "Democrat" & pidstr == 2 ~ "Not Strong Democrat",
pid_base == "Republican" & pidstr == 1 ~ "Strong Republican",
pid_base == "Republican" & pidstr == 2 ~ "Not Strong Republican",
pid_base == "Independent" & pidlean == 1 ~ "Lean Republican",
pid_base == "Independent" & pidlean == 2 ~ "Lean Democrat",
pid_base == "Independent" & pidlean == 3 ~ "Pure Independent",
pid_base == "Other" & pidlean == 1 ~ "Lean Republican",
pid_base == "Other" & pidlean == 2 ~ "Lean Democrat",
pid_base == "Other" & pidlean == 3 ~ "Pure Independent",
TRUE ~ "Missing"
)
pid_raw <- if ("pid1d" %in% names(data)) "pid1d" else "pid1r"
# Step 2: Create master party affiliation variable
data <- df %>%
mutate(
pid_base = case_when(
!!sym(pid_raw) == 1 ~ "Democrat",
!!sym(pid_raw) == 2 ~ "Republican",
!!sym(pid_raw) == 3 ~ "Independent",
!!sym(pid_raw) == 4 ~ "Other"
),
pid_type = case_when(
pid_base == "Democrat" & pidstr == 1 ~ "Strong Democrat",
pid_base == "Democrat" & pidstr == 2 ~ "Not Strong Democrat",
pid_base == "Republican" & pidstr == 1 ~ "Strong Republican",
pid_base == "Republican" & pidstr == 2 ~ "Not Strong Republican",
pid_base == "Independent" & pidlean == 1 ~ "Lean Republican",
pid_base == "Independent" & pidlean == 2 ~ "Lean Democrat",
pid_base == "Independent" & pidlean == 3 ~ "Pure Independent",
pid_base == "Other" & pidlean == 1 ~ "Lean Republican",
pid_base == "Other" & pidlean == 2 ~ "Lean Democrat",
pid_base == "Other" & pidlean == 3 ~ "Pure Independent",
TRUE ~ "Missing"
)
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(dplyr)
library(psych)
df <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv", show_col_types = FALSE)
#selecting variables
data <- df %>%
select("caseid",
"profile_gender",
"profile_age",
"pid1d",
"pid2d",
"pid1r",
"pid2r",
"pidstr",
"pidlean",
"hp_you",
"gundiff",
"c_self",
"rr1",
"rr2",
"immpol",
"trustvote",
"con_fbi")
pid_raw <- if ("pid1d" %in% names(data)) "pid1d" else "pid1r"
# Step 2: Create master party affiliation variable
data <- data %>%
mutate(
pid_base = case_when(
!!sym(pid_raw) == 1 ~ "Democrat",
!!sym(pid_raw) == 2 ~ "Republican",
!!sym(pid_raw) == 3 ~ "Independent",
!!sym(pid_raw) == 4 ~ "Other"
),
pid_type = case_when(
pid_base == "Democrat" & pidstr == 1 ~ "Strong Democrat",
pid_base == "Democrat" & pidstr == 2 ~ "Not Strong Democrat",
pid_base == "Republican" & pidstr == 1 ~ "Strong Republican",
pid_base == "Republican" & pidstr == 2 ~ "Not Strong Republican",
pid_base == "Independent" & pidlean == 1 ~ "Lean Republican",
pid_base == "Independent" & pidlean == 2 ~ "Lean Democrat",
pid_base == "Independent" & pidlean == 3 ~ "Pure Independent",
pid_base == "Other" & pidlean == 1 ~ "Lean Republican",
pid_base == "Other" & pidlean == 2 ~ "Lean Democrat",
pid_base == "Other" & pidlean == 3 ~ "Pure Independent",
TRUE ~ "Missing"
)
pid_raw <- if ("pid1d" %in% names(df)) "pid1d" else "pid1r"
# Step 2: Create master party affiliation variable
df <- df %>%
mutate(
pid_base = case_when(
!!sym(pid_raw) == 1 ~ "Democrat",
!!sym(pid_raw) == 2 ~ "Republican",
!!sym(pid_raw) == 3 ~ "Independent",
!!sym(pid_raw) == 4 ~ "Other"
),
pid_type = case_when(
# Strong and not-strong partisans
pid_base == "Democrat" & pidstr == 1 ~ "Strong Democrat",
pid_base == "Democrat" & pidstr == 2 ~ "Not Strong Democrat",
pid_base == "Republican" & pidstr == 1 ~ "Strong Republican",
pid_base == "Republican" & pidstr == 2 ~ "Not Strong Republican",
# Leaners from independents or others
pid_base %in% c("Independent", "Other") & pidlean == 1 ~ "Lean Republican",
pid_base %in% c("Independent", "Other") & pidlean == 2 ~ "Lean Democrat",
pid_base %in% c("Independent", "Other") & pidlean == 3 ~ "Pure Independent",
# Catch unclassifiable
TRUE ~ "Missing"
)
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(dplyr)
library(psych)
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(dplyr)
library(psych)
setwd("C:/Users/athen/Documents/GitHub/DimmensionalityReduction_Spring2025/final_report")
library(tidyverse)
library(dplyr)
library(psych)
df <- read_csv("anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv", show_col_types = FALSE)
#selecting variables
data <- df %>%
select("caseid",
"profile_gender",
"profile_age",
"pid1d",
"pid2d",
"pid1r",
"pid2r",
"pidstr",
"pidlean",
"hp_you",
"gundiff",
"c_self",
"rr1",
"rr2",
"immpol",
"trustvote",
"con_fbi")
pid_raw <- if ("pid1d" %in% names(df)) "pid1d" else "pid1r"
# Step 2: Create master party affiliation variable
data <- data %>%
mutate(
pid_base = case_when(
!!sym(pid_raw) == 1 ~ "Democrat",
!!sym(pid_raw) == 2 ~ "Republican",
!!sym(pid_raw) == 3 ~ "Independent",
!!sym(pid_raw) == 4 ~ "Other"
),
pid_type = case_when(
# Strong and not-strong partisans
pid_base == "Democrat" & pidstr == 1 ~ "Strong Democrat",
pid_base == "Democrat" & pidstr == 2 ~ "Not Strong Democrat",
pid_base == "Republican" & pidstr == 1 ~ "Strong Republican",
pid_base == "Republican" & pidstr == 2 ~ "Not Strong Republican",
# Leaners from independents or others
pid_base %in% c("Independent", "Other") & pidlean == 1 ~ "Lean Republican",
pid_base %in% c("Independent", "Other") & pidlean == 2 ~ "Lean Democrat",
pid_base %in% c("Independent", "Other") & pidlean == 3 ~ "Pure Independent",
# Catch unclassifiable
TRUE ~ "Missing"
)
View(data)
